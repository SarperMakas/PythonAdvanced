# -*- coding: utf-8 -*-
"""Typing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bNKVojpmaliox__Kuf_wVHaAfEOHLoEz
"""

Vector = list[float]

def scale(scalar: float, vector: Vector) -> Vector:
  return [scalar * num for num in vector]

new_vector = scale(2.0, [1.0, -4.2, 5.4])
print(new_vector)

from collections.abc import Sequence

ConnectionOptions = dict[str, str]
Address = tuple[str, int]
Server = tuple[Address, ConnectionOptions]

from typing import TypeAlias

# marked with TypeAlias to make it explicit that this  is  a type alias, not a normal variable assignment
Vector: TypeAlias = list[float]
print(type(Vector))

from typing import NewType

UserId = NewType("UserId", int)
some_id = UserId(524313)

def get_user_name(user_id: UserId) -> str:
  return str(user_id)

user_a = get_user_name(UserId(324233))
user_b = get_user_name(23)

print(user_a, user_b)

output = UserId(32342) + UserId(12345)
print(output)

from typing import NewType

UserId = NewType("UserId", int)
ProUserId = NewType("ProUserId", UserId)

import typing

# a function that takes a single parameter of type int and returns a str
print(typing.Callable[[int], str])

from collections.abc import Mapping, Sequence

class Empoloyee:
  pass

# Sequence[Employee] indicates that all elements in the sequence
# must be instances of "Employee".
# Mapping[str, str] indicates that all keys and all values in the mapping
# must be strings.

def first[T](l: list[T]) -> T:
  return l[0]

print(first([1, 2, 3]))

x: tuple[int] = (5,)
y: tuple[int, str] = (5, "foo")
z: tuple[int] = (1, 2, 3)

print(type(x), type(y), type(z))

y: tuple[()] = ()
print(y)

from logging import Logger

class LoggedVar[T]:
  def __init__(self, value: T, name: str) -> None:
    self.name = name
    self.value = value

  def set(self, new: T) -> None:
    print("set")
    self.value = new

logger = LoggedVar[int](234, "name")
logger.set(234)

from typing import Any

a: Any = None
a = []
a = 2
s: str = ""
s = a

print(s)